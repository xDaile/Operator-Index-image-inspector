import subprocess
import logging
import shlex


LOG = logging.getLogger("OIIInspector")


class LocalExecutor(object):
    """Run commands locally."""

    def __init__(self, params=None):
        """
        Initialize.
        Args:
            params (dict):
                Custom parameters to be applied when running the shell commands.
        """
        if params is None:
            params = {}
        self.params = params
        self.params.setdefault("universal_newlines", True)
        self.params.setdefault("stderr", subprocess.PIPE)
        self.params.setdefault("stdout", subprocess.PIPE)
        self.params.setdefault("stdin", subprocess.PIPE)

    def run_cmd(self, cmd, err_msg=None, tolerate_err=False, stdin=None):
        """
        Run a command locally.
        Args:
            cmd (str):
                Shell command to be executed.
            err_msg (str):
                Error message written when the command fails.
            tolerate_err (bool):
                Whether to tolerate a failed command.
            stdin (str):
                String to send to standard input for a command.
        Returns (str, str):
            Tuple of stdout and stderr generated by the command.
        """
        err_msg = err_msg or "An error has occurred when executing a command."
        p = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE)
        out, err = p.communicate()

        if p.returncode != 0 and not tolerate_err:
            LOG.error("Command {0} failed with {1}".format(cmd, err))
            raise RuntimeError(err_msg)
            return
        return out.decode('UTF-8')
